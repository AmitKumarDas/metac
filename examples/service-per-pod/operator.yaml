apiVersion: metac.openebs.io/v1alpha1
kind: DecoratorController
metadata:
  name: service-per-pod
spec:
  resources:
  - apiVersion: apps/v1
    resource: statefulsets
    annotationSelector:
      matchExpressions:
      - {key: service-per-pod-label, operator: Exists}
      - {key: service-per-pod-ports, operator: Exists}
  attachments:
  - apiVersion: v1
    resource: services
  hooks:
    sync:
      webhook:
        url: http://jsonnetd.metac/sync-service-per-pod
    finalize:
      webhook:
        url: http://jsonnetd.metac/finalize-service-per-pod
---
apiVersion: metac.openebs.io/v1alpha1
kind: DecoratorController
metadata:
  name: pod-name-label
spec:
  resources:
  - apiVersion: v1
    resource: pods
    labelSelector:
      matchExpressions:
      - {key: pod-name, operator: DoesNotExist}
    annotationSelector:
      matchExpressions:
      - {key: pod-name-label, operator: Exists}
  hooks:
    sync:
      webhook:
        url: http://jsonnetd.metac/sync-pod-name-label
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jsonnetd
  namespace: metac
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jsonnetd
  template:
    metadata:
      labels:
        app: jsonnetd
    spec:
      containers:
      - name: hooks
        # this deployment is all about exposing jsonnet as a webhook
        # that understands metac request & response payload
        image: metacontroller/jsonnetd:0.1
        imagePullPolicy: Always
        workingDir: /hooks
        volumeMounts:
        - name: hooks
          mountPath: /hooks
      volumes:
      - name: hooks
        configMap:
          # this configmap provides the jsonnet files that
          # get executed as webhooks
          name: service-per-pod-hooks
---
apiVersion: v1
kind: Service
metadata:
  # this name is used to build the webhook url
  name: jsonnetd
  # this namespace is used to build the webhook url
  namespace: metac
spec:
  selector:
    app: jsonnetd
  ports:
  - port: 80
    targetPort: 8080
